#include "gamewindow.h"
#include "filemanager.h"

#include <QtGui/QGuiApplication>
#include <QtGui/QMatrix4x4>
#include <QtGui/QOpenGLShaderProgram>
#include <QtGui/QScreen>

#include <QtCore/qmath.h>
#include <QMouseEvent>
#include <QKeyEvent>
#include <time.h>
#include <sys/time.h>
#include <iostream>

#include <QtCore>
#include <QtGui>

using namespace std;

#define MAX_PARTICLES 10000

typedef struct
{
    float x;
    float y;
    float z;
} particle;

particle Particles[MAX_PARTICLES];
PlyObject tower;
PlyObject tardis;

GameWindow::GameWindow(int fps, gamecamera* camera, int saison)
    : m_saison(saison)
{
    this->m_camera = camera;
    m_timer = new QTimer(this);
    m_calendar = new QTimer(this);
    m_day = 0;

    connect(m_timer, SIGNAL(timeout()), this, SLOT(renderNow()));
    connect(m_calendar, SIGNAL(timeout()),this, SLOT(updateSeason()));

    m_timer->start(1000/fps);
    m_calendar->start(20);
    tower = PlyObject("watchtower.ply");
    tardis = PlyObject("anonymous_tardis.ply");

    m_nbArbres = 0;
//    m_sizeOfTab3d = 4;//Changer
//    m_tab3dObjects = new PlyObject[m_sizeOfTab3d];

//    m_tabArbresParType = new int[m_sizeOfTab3d];

//    m_tabPos = new float[3*m_nbArbres];
//    m_tabTaille = new float[m_nbArbres];

    if (m_saison == PRINTEMPS)
    {
        m_day = 351;
//        m_tab3dObjects[0] = PlyObject("springtree.ply");
//        m_tab3dObjects[1] = PlyObject("summertree.ply");
//        m_tab3dObjects[2] =  PlyObject("autumntree.ply");
//        m_tab3dObjects[3] = PlyObject("wintertree.ply");
    }
    else if (m_saison == ETE)
    {
        m_day = 81;
//        m_tab3dObjects[0] = PlyObject("summertree.ply");
//        m_tab3dObjects[1] = PlyObject("autumntree.ply");
//        m_tab3dObjects[2] =  PlyObject("wintertree.ply");
//        m_tab3dObjects[3] = PlyObject("springtree.ply");
    }
    else if (m_saison == AUTOMNE)
    {
        m_day = 171;
//        m_tab3dObjects[0] =  PlyObject("autumntree.ply");
//        m_tab3dObjects[1] =  PlyObject("wintertree.ply");
//        m_tab3dObjects[2] = PlyObject("springtree.ply");
//        m_tab3dObjects[3] = PlyObject("summertree.ply");
    }
    else if (m_saison == HIVER)
    {
        m_day = 261;
//        m_tab3dObjects[0] = PlyObject("wintertree.ply");
//        m_tab3dObjects[1] = PlyObject("springtree.ply");
//        m_tab3dObjects[2] = PlyObject("summertree.ply");
//        m_tab3dObjects[3] =  PlyObject("autumntree.ply");
    }

//    m_tabArbresParType[0] = 2;
//    m_tabArbresParType[1] = 1;
//    m_tabArbresParType[2] = 1;
//    m_tabArbresParType[3] = 1;

//    m_tabPos[0] = 0;
//    m_tabPos[1] = 0;
//    m_tabPos[2] = 0;
//    m_tabTaille[0] = 0.05;

//    m_tabPos[3] = 0.2;
//    m_tabPos[4] = 0.2;
//    m_tabPos[5] = 0;
//    m_tabTaille[1] = 0.07;

//    m_tabPos[6] = 0.3;
//    m_tabPos[7] = 0;
//    m_tabPos[8] = 0;
//    m_tabTaille[2] = 0.03;

//    m_tabPos[9] = 0.1;
//    m_tabPos[10] = 0;
//    m_tabPos[11] = 0;
//    m_tabTaille[3] = 0.07;

//    m_tabPos[12] = 0.5;
//    m_tabPos[13] = -0.5;
//    m_tabPos[14] = 0;
//    m_tabTaille[4] = 0.1;

    this->m_fps = fps;
}

void GameWindow::initialize()
{
    const qreal retinaScale = devicePixelRatio();

    glViewport(0, 0, width() * retinaScale, height() * retinaScale);

    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0, 1.0, -1.0, 1.0, -100.0, 100.0);

    QString depth (":/heightmap-");
    depth += QString::number(carte) ;
    depth += ".png" ;

    loadMap(depth);
    //loadMap(":/heightmap-2.png");
    initAll();
}

void GameWindow::loadMap(QString localPath)
{
    if (QFile::exists(localPath))
    {
        m_image = QImage(localPath);
    }

    uint id = 0;
    p = new point[m_image.width() * m_image.height()];
    QRgb pixel;
    for(int i = 0; i < m_image.width(); i++)
    {
        for(int j = 0; j < m_image.height(); j++)
        {

            pixel = m_image.pixel(i,j);

            id = i*m_image.width() +j;

            p[id].x = (float)i/(m_image.width()) - ((float)m_image.width()/2.0)/m_image.width();
            p[id].y = (float)j/(m_image.height()) - ((float)m_image.height()/2.0)/m_image.height();
            p[id].z = 0.001f *(float)(qRed(pixel));
        }
    }
}

gamecamera* GameWindow::getCamera()
{
    return this->m_camera;
}

void GameWindow::setCamera(gamecamera* camera)
{
    this->m_camera = camera;
}

void GameWindow::render()
{
    glClear(GL_COLOR_BUFFER_BIT);
    update();
    glLoadIdentity();

    m_camera->scale();
    glRotatef(this->m_camera->getRotX(),1.0f,0.0f,0.0f);

    if(this->m_hasToRotate)
        this->m_camera->setRotY(this->m_camera->getRotY() + 1.0f);

    glRotatef(this->m_camera->getRotY(),0.0f,0.0f,1.0f);

    switch(this->m_camera->getEtat())
    {
    case 0:
        displayPoints();
        break;
    case 1:
        displayLines();
        break;
    case 2:
        displayTriangles();
        break;
    case 3:
        displayTrianglesC();
        break;
    case 4:
        displayTrianglesTexture();
        break;
    case 5:
        displayLines();
        displayTrianglesTexture();
        break;
    default:
        displayPoints();
        break;
    }

    if(m_nbArbres > 0)
    {
        glColor3f(0, 1, 0);
        int k = 0;
        for(int i = 0; i < m_sizeOfTab3d; ++i)
        {
            for(int j = 0; j < m_tabArbresParType[i]; ++j)
            {
                displayPlyObject(m_tab3dObjects[i], m_tabPos[k], m_tabPos[k+1], m_tabPos[k+2], m_tabTaille[k/3]);
                k+=3;
            }
        }
    }
    glColor3f(0, 1, 0);
    displayPlyObject(tower, 0, 0, 0, 0.1);
    glColor3f(0,0, 1);
    displayPlyObject(tardis, 0, 0, 0, 1);

    ++m_frame;
    if(m_camera->m_temps != RIEN)
    {
        if(m_camera->m_temps == PLUIE || (m_camera->m_temps == NORMALE && m_saison == AUTOMNE))
        {
            glColor3f(0, 0, 1);
            glBegin(GL_POINTS);

            for(int i = 0; i <= MAX_PARTICLES; i++)
            {
                glVertex3f(Particles[i].x, Particles[i].y, Particles[i].z);
            }
            glEnd();

            glPointSize(1);
        }
        else if(m_camera->m_temps == NEIGE || (m_camera->m_temps == NORMALE && m_saison == HIVER))
        {
            glPointSize(1/2);
            glColor3f(1, 1, 1);

            glBegin(GL_POINTS);

            for(int i = 0; i <= MAX_PARTICLES; i++)
            {
                glVertex3f(Particles[i].x, Particles[i].y, Particles[i].z);
            }
            glEnd();

            glPointSize(1);
        }
    }
}

bool GameWindow::event(QEvent *event)
{
    switch (event->type())
    {
    case QEvent::UpdateRequest:

        renderNow();
        return true;
    default:
        return QWindow::event(event);
    }
}

void GameWindow::keyPressEvent(QKeyEvent *event)
{
    switch(event->key())
    {
    case 'Z':
        this->m_camera->setScale(this->m_camera->getScale()+0.10f);
        break;
    case 'S':
        this->m_camera->setScale(this->m_camera->getScale()-0.10f);
        break;
    case 'A':
        this->m_camera->setRotX(this->m_camera->getRotX()+1.0f);
        break;
    case 'E':
        this->m_camera->setRotX(this->m_camera->getRotX()-1.0f);
        break;
    case 'Q':
        this->m_camera->setRotY(this->m_camera->getRotY()+1.0f);
        break;
    case 'D':
        this->m_camera->setRotY(this->m_camera->getRotY()-1.0f);
        break;
    case 'W':
        this->m_camera->setEtat((this->m_camera->getEtat() + 1) % 6);
        break;
    case 'C':
        this->m_hasToRotate = !this->m_hasToRotate;
        break;
    case 'V':
        this->m_saison = (m_saison+ 1)%4;
        break;
    case 'F':
        this->m_camera->m_temps = (m_camera->m_temps+1) %4;
        break;
    case 'P':
        if(this->m_fps < 2000)
            this->m_fps *= 2;

        this->m_timer->stop();
        this->m_timer->start(1000/m_fps);
        break;
    case 'M':
        if(this->m_fps > 2)
            this->m_fps /= 2;

        this->m_timer->stop();
        this->m_timer->start(1000/m_fps);
        break;
    case 'O':
    {
        FileManager* fileManager = new FileManager(this);
        fileManager->saveData();
        fileManager->save3dObjects(m_tab3dObjects, m_tabArbresParType, m_sizeOfTab3d, m_tabPos,
                                   m_tabTaille, m_nbArbres);

        break;
    }
    case 'L':
    {
        loadCustomMap();
        FileManager* fileManager = new FileManager(this);
        fileManager->read3dObjects();
        m_nbArbres = fileManager->getNbArbres();
        m_sizeOfTab3d = fileManager->getSizeOfTab3d();

        m_tab3dObjects = fileManager->getTab3dObjects();
        m_tabArbresParType = fileManager->getTabArbresParType();
        m_tabPos = fileManager->getTabPos();
        m_tabTaille = fileManager->getTabTaille();

        for(int i = 0; i < m_nbArbres*3; ++i)
            qDebug() << m_tabPos[i] << " ";
        break;
    }
    case 'X':
        carte++;
        if(carte > 3)
            carte = 1;
        QString depth (":/heightmap-");
        depth += QString::number(carte) ;
        depth += ".png" ;

        loadMap(depth);
        break;
    }
    //renderNow();
}

void GameWindow::displayPoints()
{
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_POINTS);
    uint id = 0;
    for(int i = 0; i < m_image.width(); i++)
    {
        for(int j = 0; j < m_image.height(); j++)
        {
            id = i*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);

        }
    }
    glEnd();
}

void GameWindow::displayTriangles()
{
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_TRIANGLES);
    uint id = 0;

    for(int i = 0; i < m_image.width()-1; i++)
    {
        for(int j = 0; j < m_image.height()-1; j++)
        {

            id = i*m_image.width() +j;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = i*m_image.width() +(j+1);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);



            id = i*m_image.width() +(j+1);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j+1;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
        }
    }

    glEnd();
}

void GameWindow::displayTrianglesC()
{
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_TRIANGLES);
    uint id = 0;

    for(int i = 0; i < m_image.width()-1; i++)
    {
        for(int j = 0; j < m_image.height()-1; j++)
        {
            glColor3f(0.0f, 1.0f, 0.0f);
            id = i*m_image.width() +j;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = i*m_image.width() +(j+1);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);


            glColor3f(1.0f, 1.0f, 1.0f);
            id = i*m_image.width() +(j+1);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j+1;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j;
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
        }
    }
    glEnd();
}

void GameWindow::displayLines()
{
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_LINES);
    uint id = 0;

    for(int i = 0; i < m_image.width()-1; i++)
    {
        for(int j = 0; j < m_image.height()-1; j++)
        {

            id = i*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = i*m_image.width() +(j+1);
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);

            id = (i+1)*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = i*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);

            id = (i+1)*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = i*m_image.width() +(j+1);
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);

            id = i*m_image.width() +(j+1);
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j+1;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);

            id = (i+1)*m_image.width() +j+1;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);

            id = (i+1)*m_image.width() +(j);
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
        }
    }

    glEnd();
}

void GameWindow::displayTrianglesTexture()
{
    glColor3f(1.0f, 1.0f, 1.0f);
    glBegin(GL_TRIANGLES);
    uint id = 0;

    for(int i = 0; i < m_image.width()-1; i++)
    {
        for(int j = 0; j < m_image.height()-1; j++)
        {

            id = i*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = i*m_image.width() +(j+1);
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);



            id = i*m_image.width() +(j+1);
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j+1;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
            id = (i+1)*m_image.width() +j;
            displayColor(p[id].z);
            glVertex3f(
                        p[id].x,
                        p[id].y,
                        p[id].z);
        }
    }
    glEnd();
}

void getPrintempsColor(float z)
{
    if(z < 10.0f * 0.001f)
        glColor3f(65/255.0f, 105/255.0f, 225/255.0f);//Bleu foncé
    else if(z < 50.0f* 0.001f)
        glColor3f(46/255.0f, 160/255.0f, 87/255.0f);//Vert
    else if(z < 200.0f* 0.001f)
        glColor3f(126/255.0f, 88/255.0f, 53/255.0f);//Marron
    else
        glColor3f(220/255.0f, 220/255.0f, 220/255.0f);//Gris clair
}

void getEteColor(float z)
{
    if(z < 10.0f * 0.001f)
        glColor3f(65/255.0f, 105/255.0f, 225/255.0f);//Bleu foncé
    else if(z < 50.0f* 0.001f)
        glColor3f(20/255.0f, 139/255.0f, 40/255.0f);//Vert
    else //if(z < 130.0f* 0.001f)
        glColor3f(126/255.0f, 88/255.0f, 53/255.0f);//Marron
}

void getAutomneColor(float z)
{
    if(z < 10.0f * 0.001f)
        glColor3f(65/255.0f, 105/255.0f, 225/255.0f);//Bleu foncé
    else if(z < 35.0f* 0.001f)
        glColor3f(46/255.0f, 90/255.0f, 87/255.0f);//Vert foncé
    else if(z < 80.0f* 0.001f)
        glColor3f(247/255.0f, 166/255.0f, 59/255.0f);//Orange
    else if(z < 130.0f* 0.001f)
        glColor3f(126/255.0f, 88/255.0f, 53/255.0f);//Marron
    else// if(z < 200.0f* 0.001f)
        glColor3f(220/255.0f, 220/255.0f, 220/255.0f);//Gris clair
}

void getHiverColor(float z)
{
    if(z < 10.0f * 0.001f)
        glColor3f(150/255.0f, 150/255.0f, 225/255.0f);//Bleu foncé
    else if(z < 40.0f* 0.001f)
         glColor3f(220/255.0f, 220/255.0f, 220/255.0f);//Gris clair
    else if(z < 60.0f* 0.001f)
        glColor3f(126/255.0f, 88/255.0f, 53/255.0f);//Marron
    else
        glColor3f(1, 1, 1);//Blanc
}

void GameWindow::displayColor(float alt)
{
    if(m_saison == PRINTEMPS)
        getPrintempsColor(alt);
    else if(m_saison == ETE)
        getEteColor(alt);
    else if(m_saison == AUTOMNE)
        getAutomneColor(alt);
    else if(m_saison == HIVER)
        getHiverColor(alt);
}

void GameWindow::initAll()
{
    for(int i = 0; i <= MAX_PARTICLES; i++)
    {
        Particles[i].x = -0.5 + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(0.5+0.5)));
        Particles[i].y = -0.5+ static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(0.5+0.5)));
        Particles[i].z = 1 + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(-1)));
    }
}

void GameWindow::initEntity(int i)
{
    Particles[i].x = -0.5 + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(0.5+0.5)));
    Particles[i].y = -0.5+ static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(0.5+0.5)));
    Particles[i].z = 1 + static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(-1)));
}

void GameWindow::update()
{
    if(m_camera->m_temps == PLUIE || (m_camera->m_temps == NORMALE && m_saison == AUTOMNE) )
    {
        for(int i = 0; i <= MAX_PARTICLES; i++)
        {
            Particles[i].z -= (rand() % 20*0.001f);

            if(Particles[i].z <= 0.1)
            {
                initEntity(i);
            }
        }
    }
    else if(m_camera->m_temps == NEIGE || (m_camera->m_temps == NORMALE && m_saison == HIVER) )
    {
        for(int i = 0; i <= MAX_PARTICLES; i++)
        {
            Particles[i].x += -0.005+ static_cast <float> (rand()) /( static_cast <float> (RAND_MAX/(0.005+0.005)));
            Particles[i].z -= (rand() % 10*0.001f);

            if(Particles[i].z <= 0.1)
            {
                initEntity(i);
            }
        }
    }
}

void GameWindow::updateSeason()
{
    m_day = (m_day + 1) % 365;

    if (m_day <= 80)
        m_saison = PRINTEMPS;
    else if (m_day <= 170)
        m_saison = ETE;
    else if (m_day <= 260)
        m_saison = AUTOMNE;
    else if (m_day <=350)
        m_saison = HIVER;

    m_calendar->start(20);
}

int GameWindow::getDay() const
{
    return m_day;
}

void GameWindow::setDay(int day)
{
    m_day = day;
}

int GameWindow::getCarte() const
{
    return carte;
}

void GameWindow::setCarte(int value)
{
    carte = value;
}

void GameWindow::loadCustomMap()
{
    FileManager* fileManager = new FileManager(this);
    fileManager->readData();
    this->carte = fileManager->carte();
    QString depth (":/heightmap-");
    depth += QString::number(carte) ;
    depth += ".png" ;
    loadMap(depth);
    this->m_day = fileManager->day();
    this->m_camera->setEtat(fileManager->etat());
    this->m_camera->setRotX(fileManager->rotX());
    this->m_camera->setRotY(fileManager->rotY());
    this->m_camera->setScale(fileManager->ss());
}

void GameWindow::displayPlyObject(PlyObject object, float x, float y, float z, float taille)
{
    float* tabPoints = object.getTabPoints();
    int* tabFaces = object.getTabFaces();
    int nbFaces = object.getNbFaces();

    for(int i = 0; i < nbFaces*4; i +=4)
    {
        if(tabFaces[i+3] != -1)
        {
            glBegin(GL_QUADS);
            glVertex3f(x + tabPoints[tabFaces[i]*3]*taille,   y + tabPoints[tabFaces[i]*3 + 1]*taille,   z + tabPoints[tabFaces[i]*3 + 2]*taille);
            glVertex3f(x + tabPoints[tabFaces[i+1]*3]*taille, y + tabPoints[tabFaces[i+1]*3 + 1]*taille, z + tabPoints[tabFaces[i+1]*3 + 2]*taille);
            glVertex3f(x + tabPoints[tabFaces[i+2]*3]*taille, y + tabPoints[tabFaces[i+2]*3 + 1]*taille, z + tabPoints[tabFaces[i+2]*3 + 2]*taille);
            glVertex3f(x + tabPoints[tabFaces[i+3]*3]*taille, y + tabPoints[tabFaces[i+3]*3 + 1]*taille, z + tabPoints[tabFaces[i+3]*3 + 2]*taille);
            glEnd();
        }
        else
        {
            glBegin(GL_TRIANGLES);
            glVertex3f(x + tabPoints[tabFaces[i]*3]*taille,   y + tabPoints[tabFaces[i]*3 + 1]*taille,   z + tabPoints[tabFaces[i]*3 + 2]*taille);
            glVertex3f(x + tabPoints[tabFaces[i+1]*3]*taille, y + tabPoints[tabFaces[i+1]*3 + 1]*taille, z + tabPoints[tabFaces[i+1]*3 + 2]*taille);
            glVertex3f(x + tabPoints[tabFaces[i+2]*3]*taille, y + tabPoints[tabFaces[i+2]*3 + 1]*taille, z + tabPoints[tabFaces[i+2]*3 + 2]*taille);
            glEnd();
        }
    }
}
